name: Flutter CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "WC_CONSUMER_KEY=${{ secrets.WC_CONSUMER_KEY }}" > .env
          echo "WC_SECRET_KEY=${{ secrets.WC_SECRET_KEY }}" >> .env
          echo "WC_BASE_URL=${{ secrets.WC_BASE_URL }}" >> .env

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.1'

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze Dart code (flutter analyze)
        run: flutter analyze

      - name: Install Dart Code Metrics
        run: dart pub global activate dart_code_metrics

      - name: Analyze Dart code (Dart Code Metrics)
        run: |
          dart pub global run dart_code_metrics:metrics analyze lib
          dart pub global run dart_code_metrics:metrics check-unused-files lib
          dart pub global run dart_code_metrics:metrics check-unused-code lib

      - name: Run tests
        run: flutter test

      - name: Build APK
        run: flutter build apk --release

      - name: Upload artifact (APK)
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Create Release
        id: create_release
        if: github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ github.run_number }}" build/app/outputs/flutter-apk/app-release.apk \
            --title "Release ${{ github.run_number }}" \
            --notes "Automated release by GitHub Actions"
        shell: bash

      - name: Upload Release Asset
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'build/app/outputs/flutter-apk/app-release.apk';
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: (await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              })).data.find(r => r.tag_name === `${{ github.run_number }}`).id
            });
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: `app-release-${{ github.run_number }}.apk`,
              data: fs.readFileSync(path),
              headers: {
                'content-type': 'application/vnd.android.package-archive',
                'content-length': fs.statSync(path).size
              }
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Release Download URL
        if: github.event_name == 'push'
        id: get_download_url
        run: |
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.run_number }}/app-release-${{ github.run_number }}.apk"
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "Download URL: $DOWNLOAD_URL"

      - name: Generate QR Code
        if: github.event_name == 'push'
        run: |
          sudo apt-get update
          sudo apt-get install -y qrencode
          qrencode -s 10 -o qr_code.png "${{ steps.get_download_url.outputs.download_url }}"
          echo "QR Code generated successfully"

      - name: Send Email with QR Code
        if: github.event_name == 'push'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: "ðŸš€ New App Release ${{ github.run_number }} - QR Code Download"
          to: ${{ secrets.EMAIL_RECIPIENT }}
          from: ${{ secrets.GMAIL_USERNAME }}
          html_body: |
            <h2>ðŸŽ‰ New Release Available!</h2>
            <p><strong>Release:</strong> ${{ github.run_number }}</p>
            <p><strong>Repository:</strong> ${{ github.repository }}</p>
            <p><strong>Commit:</strong> ${{ github.sha }}</p>
            <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
            
            <h3>ðŸ“± Download APK</h3>
            <p>Scan the QR code below or click the direct link to download:</p>
            
            <p><a href="${{ steps.get_download_url.outputs.download_url }}" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Download APK</a></p>
            
            <h3>ðŸ“Š QR Code</h3>
            <p>Scan this QR code with your phone to download the APK:</p>
            
            <hr>
            <p><em>This is an automated email from GitHub Actions CI/CD pipeline.</em></p>
          attachments: qr_code.png

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Create .env file
        run: |
          echo "WC_CONSUMER_KEY=${{ secrets.WC_CONSUMER_KEY }}" > .env
          echo "WC_SECRET_KEY=${{ secrets.WC_SECRET_KEY }}" >> .env
          echo "WC_BASE_URL=${{ secrets.WC_BASE_URL }}" >> .env

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.1'

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze Dart code (flutter analyze)
        run: flutter analyze

      - name: Build (for SonarQube)
        run: flutter build apk --debug

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # Add this secret in your repo
