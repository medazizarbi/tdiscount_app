name: Flutter CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "WC_CONSUMER_KEY=${{ secrets.WC_CONSUMER_KEY }}" > .env
          echo "WC_SECRET_KEY=${{ secrets.WC_SECRET_KEY }}" >> .env
          echo "WC_BASE_URL=${{ secrets.WC_BASE_URL }}" >> .env

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.1'

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze Dart code (flutter analyze)
        run: flutter analyze

      - name: Install Dart Code Metrics
        run: dart pub global activate dart_code_metrics

      - name: Analyze Dart code (Dart Code Metrics)
        run: |
          dart pub global run dart_code_metrics:metrics analyze lib
          dart pub global run dart_code_metrics:metrics check-unused-files lib
          dart pub global run dart_code_metrics:metrics check-unused-code lib

      - name: Run tests
        run: flutter test

      - name: Build APK
        run: flutter build apk --release

      - name: Upload artifact (APK)
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Create Release
        id: create_release
        if: github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ github.run_number }}" build/app/outputs/flutter-apk/app-release.apk \
            --title "Release ${{ github.run_number }}" \
            --notes "Automated release by GitHub Actions"
        shell: bash

      - name: Upload Release Asset
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'build/app/outputs/flutter-apk/app-release.apk';
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: (await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              })).data.find(r => r.tag_name === `${{ github.run_number }}`).id
            });
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: `app-release-${{ github.run_number }}.apk`,
              data: fs.readFileSync(path),
              headers: {
                'content-type': 'application/vnd.android.package-archive',
                'content-length': fs.statSync(path).size
              }
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Release Download URL
        if: github.event_name == 'push'
        id: get_download_url
        run: |
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.run_number }}/app-release-${{ github.run_number }}.apk"
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "Download URL: $DOWNLOAD_URL"

      - name: Generate QR Code
        if: github.event_name == 'push'
        run: |
          sudo apt-get update
          sudo apt-get install -y qrencode
          qrencode -s 10 -o qr_code.png "${{ steps.get_download_url.outputs.download_url }}"
          echo "QR Code generated successfully"

      - name: Send Email with QR Code
        if: github.event_name == 'push'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: "🚀 New App Release ${{ github.run_number }} - QR Code Download"
          to: ${{ secrets.EMAIL_RECIPIENT }}
          from: ${{ secrets.GMAIL_USERNAME }}
          html_body: |
            <h2>🎉 New Release Available!</h2>
            <p><strong>Release:</strong> ${{ github.run_number }}</p>
            <p><strong>Repository:</strong> ${{ github.repository }}</p>
            <p><strong>Commit:</strong> ${{ github.sha }}</p>
            <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
            
            <h3>📱 Download APK</h3>
            <p>Scan the QR code below or click the direct link to download:</p>
            
            <p><a href="${{ steps.get_download_url.outputs.download_url }}" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Download APK</a></p>
            
            <h3>📊 QR Code</h3>
            <p>Scan this QR code with your phone to download the APK:</p>
            
            <hr>
            <p><em>This is an automated email from GitHub Actions CI/CD pipeline.</em></p>
          attachments: qr_code.png

  build-ios:
    runs-on: macos-latest
    needs: build
    outputs:
      ipa_path: ${{ steps.build_ipa.outputs.ipa_path }}
      diawi_link: ${{ steps.upload_diawi.outputs.diawi_link }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "WC_CONSUMER_KEY=${{ secrets.WC_CONSUMER_KEY }}" > .env
          echo "WC_SECRET_KEY=${{ secrets.WC_SECRET_KEY }}" >> .env
          echo "WC_BASE_URL=${{ secrets.WC_BASE_URL }}" >> .env

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.1'

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install dependencies
        run: flutter pub get

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Build iOS IPA
        id: build_ipa
        run: |
          # Build iOS without code signing
          flutter build ios --release --no-codesign
          
          # Create IPA file
          mkdir -p build/ios/ipa/Payload
          cp -r build/ios/iphoneos/Runner.app build/ios/ipa/Payload/
          cd build/ios/ipa
          zip -r ../Runner.ipa Payload/
          cd ../../../
          
          echo "ipa_path=build/ios/Runner.ipa" >> $GITHUB_OUTPUT
          echo "IPA created successfully"

      - name: Upload to Diawi
        id: upload_diawi
        run: |
          # Upload IPA to Diawi
          RESPONSE=$(curl -X POST \
            -F "file=@build/ios/Runner.ipa" \
            -F "token=${{ secrets.DIAWI_TOKEN }}" \
            -F "callback_emails=${{ secrets.EMAIL_RECIPIENT }}" \
            -F "installation_notifications=true" \
            https://upload.diawi.com/)
          
          echo "Diawi upload response: $RESPONSE"
          
          # Extract job ID from response
          JOB_ID=$(echo $RESPONSE | jq -r '.job')
          echo "Diawi Job ID: $JOB_ID"
          
          # Wait for processing (usually takes 1-2 minutes)
          echo "Waiting for Diawi to process the IPA..."
          sleep 120
          
          # Get the download link
          STATUS_RESPONSE=$(curl -s "https://upload.diawi.com/status?token=${{ secrets.DIAWI_TOKEN }}&job=$JOB_ID")
          echo "Diawi status response: $STATUS_RESPONSE"
          
          DIAWI_LINK=$(echo $STATUS_RESPONSE | jq -r '.link // empty')
          
          if [ -n "$DIAWI_LINK" ]; then
            echo "diawi_link=https://i.diawi.com/$DIAWI_LINK" >> $GITHUB_OUTPUT
            echo "Diawi link: https://i.diawi.com/$DIAWI_LINK"
          else
            echo "Failed to get Diawi link"
            exit 1
          fi

      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: build/ios/Runner.ipa

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    needs: build
    outputs:
      vulnerabilities: ${{ steps.sonar_results.outputs.vulnerabilities }}
      bugs: ${{ steps.sonar_results.outputs.bugs }}
      code_smells: ${{ steps.sonar_results.outputs.code_smells }}
      coverage: ${{ steps.sonar_results.outputs.coverage }}
      duplicated_lines: ${{ steps.sonar_results.outputs.duplicated_lines }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create .env file
        run: |
          echo "WC_CONSUMER_KEY=${{ secrets.WC_CONSUMER_KEY }}" > .env
          echo "WC_SECRET_KEY=${{ secrets.WC_SECRET_KEY }}" >> .env
          echo "WC_BASE_URL=${{ secrets.WC_BASE_URL }}" >> .env

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.1'

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze Dart code (flutter analyze)
        run: flutter analyze

      - name: Build (for SonarQube)
        run: flutter build apk --debug

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Extract SonarQube Results
        id: sonar_results
        run: |
          # Wait for SonarQube analysis to complete
          sleep 30
          
          # Get project key (usually repository name)
          PROJECT_KEY="${{ github.repository }}"
          PROJECT_KEY=$(echo $PROJECT_KEY | sed 's/\//_/g')
          
          # Fetch metrics from SonarQube API
          SONAR_URL="${{ secrets.SONAR_HOST_URL }}"
          SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}"
          
          # Get vulnerabilities
          VULNERABILITIES=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_URL/api/measures/component?component=$PROJECT_KEY&metricKeys=vulnerabilities" | jq -r '.component.measures[0].value // "0"')
          
          # Get bugs
          BUGS=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_URL/api/measures/component?component=$PROJECT_KEY&metricKeys=bugs" | jq -r '.component.measures[0].value // "0"')
          
          # Get code smells
          CODE_SMELLS=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_URL/api/measures/component?component=$PROJECT_KEY&metricKeys=code_smells" | jq -r '.component.measures[0].value // "0"')
          
          # Get coverage
          COVERAGE=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_URL/api/measures/component?component=$PROJECT_KEY&metricKeys=coverage" | jq -r '.component.measures[0].value // "0"')
          
          # Get duplicated lines percentage
          DUPLICATED_LINES=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_URL/api/measures/component?component=$PROJECT_KEY&metricKeys=duplicated_lines_density" | jq -r '.component.measures[0].value // "0"')
          
          echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
          echo "bugs=$BUGS" >> $GITHUB_OUTPUT
          echo "code_smells=$CODE_SMELLS" >> $GITHUB_OUTPUT
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "duplicated_lines=$DUPLICATED_LINES" >> $GITHUB_OUTPUT
          
          echo "SonarQube Results:"
          echo "Vulnerabilities: $VULNERABILITIES"
          echo "Bugs: $BUGS"
          echo "Code Smells: $CODE_SMELLS"
          echo "Coverage: $COVERAGE%"
          echo "Duplicated Lines: $DUPLICATED_LINES%"

  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [build, build-ios, sonarqube]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Android Release Download URL
        id: get_download_url
        run: |
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.run_number }}/app-release-${{ github.run_number }}.apk"
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "Android Download URL: $DOWNLOAD_URL"

      - name: Generate QR Codes
        run: |
          sudo apt-get update
          sudo apt-get install -y qrencode
          
          # Android QR Code
          qrencode -s 10 -o android_qr.png "${{ steps.get_download_url.outputs.download_url }}"
          
          # iOS QR Code (from Diawi)
          qrencode -s 10 -o ios_qr.png "${{ needs.build-ios.outputs.diawi_link }}"
          
          echo "QR Codes generated successfully"

      - name: Send Cross-Platform Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: "🚀 Cross-Platform Release ${{ github.run_number }} - Android APK & iOS IPA"
          to: ${{ secrets.EMAIL_RECIPIENT }}
          from: ${{ secrets.GMAIL_USERNAME }}
          html_body: |
            <h2>🎉 New Cross-Platform Release Available!</h2>
            <p><strong>Release:</strong> ${{ github.run_number }}</p>
            <p><strong>Repository:</strong> ${{ github.repository }}</p>
            <p><strong>Commit:</strong> ${{ github.sha }}</p>
            <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
            
            <h3>📱 Download Links</h3>
            <table style="border-collapse: collapse; width: 100%; margin-bottom: 20px;">
              <tr>
                <td style="padding: 15px; text-align: center; border: 1px solid #ddd;">
                  <h4>🤖 Android APK</h4>
                  <p><a href="${{ steps.get_download_url.outputs.download_url }}" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Download APK</a></p>
                  <p><em>Direct installation via QR code</em></p>
                </td>
                <td style="padding: 15px; text-align: center; border: 1px solid #ddd;">
                  <h4>🍎 iOS IPA</h4>
                  <p><a href="${{ needs.build-ios.outputs.diawi_link }}" style="background-color: #007AFF; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Install on iPhone</a></p>
                  <p><em>Direct installation via Diawi</em></p>
                </td>
              </tr>
            </table>
            
            <h3>📊 Code Quality Report (SonarQube)</h3>
            <table style="border-collapse: collapse; width: 100%; border: 1px solid #ddd; margin-bottom: 20px;">
              <tr style="background-color: #f2f2f2;">
                <td style="border: 1px solid #ddd; padding: 8px;"><strong>🔒 Vulnerabilities:</strong></td>
                <td style="border: 1px solid #ddd; padding: 8px; color: ${{ needs.sonarqube.outputs.vulnerabilities == '0' && '#4CAF50' || '#f44336' }};">
                  ${{ needs.sonarqube.outputs.vulnerabilities }}
                </td>
              </tr>
              <tr>
                <td style="border: 1px solid #ddd; padding: 8px;"><strong>🐛 Bugs:</strong></td>
                <td style="border: 1px solid #ddd; padding: 8px; color: ${{ needs.sonarqube.outputs.bugs == '0' && '#4CAF50' || '#f44336' }};">
                  ${{ needs.sonarqube.outputs.bugs }}
                </td>
              </tr>
              <tr style="background-color: #f2f2f2;">
                <td style="border: 1px solid #ddd; padding: 8px;"><strong>💨 Code Smells:</strong></td>
                <td style="border: 1px solid #ddd; padding: 8px;">
                  ${{ needs.sonarqube.outputs.code_smells }}
                </td>
              </tr>
              <tr>
                <td style="border: 1px solid #ddd; padding: 8px;"><strong>🧪 Test Coverage:</strong></td>
                <td style="border: 1px solid #ddd; padding: 8px;">
                  ${{ needs.sonarqube.outputs.coverage }}%
                </td>
              </tr>
              <tr style="background-color: #f2f2f2;">
                <td style="border: 1px solid #ddd; padding: 8px;"><strong>📋 Duplicated Lines:</strong></td>
                <td style="border: 1px solid #ddd; padding: 8px;">
                  ${{ needs.sonarqube.outputs.duplicated_lines }}%
                </td>
              </tr>
            </table>
            
            <h3>📱 QR Codes for Direct Installation</h3>
            <table style="border-collapse: collapse; width: 100%;">
              <tr>
                <td style="padding: 15px; text-align: center;">
                  <h4>🤖 Android QR Code</h4>
                  <p><em>Scan with any Android device</em></p>
                </td>
                <td style="padding: 15px; text-align: center;">
                  <h4>🍎 iOS QR Code</h4>
                  <p><em>Scan with iPhone/iPad (Safari)</em></p>
                </td>
              </tr>
            </table>
            
            <h3>📋 Installation Instructions:</h3>
            <h4>Android:</h4>
            <ol>
              <li>Scan QR code or click download link</li>
              <li>Allow installation from unknown sources if prompted</li>
              <li>Install the APK</li>
            </ol>
            
            <h4>iOS:</h4>
            <ol>
              <li>Scan QR code with Camera app or click Diawi link</li>
              <li>Tap "Install" on the Diawi page</li>
              <li>Go to Settings → General → Device Management</li>
              <li>Trust the developer certificate</li>
              <li>App will appear on home screen</li>
            </ol>
            
            <hr>
            <p><em>This is an automated email from GitHub Actions CI/CD pipeline.</em></p>
            <p><em>SonarQube Dashboard: <a href="${{ secrets.SONAR_HOST_URL }}/dashboard?id=${{ github.repository }}">View Full Report</a></em></p>
          attachments: android_qr.png,ios_qr.png
